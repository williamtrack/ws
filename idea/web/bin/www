#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const http = require('http');
const debug = require('debug')('boevrS:server');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || 80);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
// const server = http.createServer();

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
// server.on('request', function (req, res) {
//     // console.log(req);
//     const url = req.url;
//     if (url === '/') {
//         res.writeHead(301, {
//             'Location': 'https://boevr.cn' + url
//         });
//     }
//     res.end();
// });

server.on('error', onError);

server.on('listening', function () {
    console.log("listening at port:",port)
    onListening(server);
});

// //启动 wsServer1
// const wsServer = require('../wsServer');
// wsServer({server: server});

//新建一个http服务跑 启动wsServer2
const wsServer2 = require('../wsServer2');
const server2 = http.createServer();
server2.listen(7000);
wsServer2({server: server2});
server2.on('listening', function () {
    console.log("ws listening at port:", 7000)
    onListening(server);
});

// ==== https wss ===
// const https = require('https');
// const fs = require('fs');

// Configure https
// const httpsOption = {
//     key: fs.readFileSync("./https/boevr.cn.key"),
//     cert: fs.readFileSync("./https/boevr.cn.pem")
// };
// const ports = normalizePort(443);
// const servers = https.createServer(httpsOption, app);
// servers.listen(ports);
// servers.on('error', onError);
// servers.on('listening', function () {
//     onListening(servers);
// });

// const wssServer = require('../wsServer');
// wssServer({server: servers});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    console.log('--err--');
    if (error.syscall !== 'listen') {
        throw error;
    }
    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
    let addr = server.address();
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}